/*
 * AverageFilter.cpp
 *
 *  Created on: 11 janv. 2013
 *      Author: Aberzen
 */


// constructor
template <class T, class U, uint8_t FILTER_SIZE>
AverageFilter<T,U,FILTER_SIZE>::AverageFilter() 
: Delay<T,FILTER_SIZE>()
{
};

// Destructor
template <class T, class U, uint8_t FILTER_SIZE>
AverageFilter<T,U,FILTER_SIZE>::~AverageFilter(){
}

template <class T, class U, uint8_t FILTER_SIZE>
T AverageFilter<T,U,FILTER_SIZE>::apply(T sample)
{
    T result;
    /* Add sample to the sum */
    _sumVal += sample;

    /* Save newest value, and get oldest one */
    T oldestValue = Delay<T,FILTER_SIZE>::apply(sample);

    /* Compute mean value */
    result = (T) (_sumVal / ((U)(FILTER_SIZE+1)));

    /* Remove oldest value from sum */
    _sumVal -= (U) oldestValue;

    return result;
}

// Reset
template <class T, class U, uint8_t FILTER_SIZE>
void AverageFilter<T,U,FILTER_SIZE>::reset(T value)
{
	Delay<T,FILTER_SIZE>::reset(value);
	_sumVal = (FILTER_SIZE+1) * value;
}

