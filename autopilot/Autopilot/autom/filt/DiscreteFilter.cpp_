/*
 * DiscreteFilter.cpp
 *
 *  Created on: 12 janv. 2013
 *      Author: Aberzen
 */

#include <string.h>

namespace autom {

template <class T, class U, uint8_t FILTER_SIZE_X, uint8_t FILTER_SIZE_Y>
DiscreteFilter<T,U,FILTER_SIZE_X,FILTER_SIZE_Y>::DiscreteFilter(
		const Parameter& param)
: Filter<T>(),
 _sampleIdxY(0),
 _sampleIdxX(0),
 _param(param)
{
	uint8_t idx;
	/* Initialize to zero */
	for (idx=0 ; idx<FILTER_SIZE_X ; idx++)
	{
		_valuesX[idx] = (T) 0;
	}

	for (idx=0 ; idx<FILTER_SIZE_Y ; idx++)
	{
		_valuesY[idx] = (T) 0;
	}
}
template <class T, class U, uint8_t FILTER_SIZE_X, uint8_t FILTER_SIZE_Y>
DiscreteFilter<T,U,FILTER_SIZE_X,FILTER_SIZE_Y>::~DiscreteFilter(){
}

/** apply - Add a new raw value to the filter, retrieve the filtered result
 * The filter is:
 * Y(z)   a0 + a1*(1/z) + ... + an*(1/z)^n
 * ---- = --------------------------------
 * X(z)   b0 + b1*(1/z) + ... + bn*(1/z)^n
 *
 * which can be rewritten as:
 * Y(t) = [ (a0*X(t)+a1*X(t-T)+...+an*X(t-nT)) - (b1*Y(t-T)+...+bn*Y(t-nT)) ] / b0
 */
template <class T, class U, uint8_t FILTER_SIZE_X, uint8_t FILTER_SIZE_Y>
T DiscreteFilter<T,U,FILTER_SIZE_X,FILTER_SIZE_Y>::apply(T sample){
    U        sum = (U) 0;
    uint8_t coefIdx;
    uint8_t valIdx;
    T result;

    // Update X(t) value
    _valuesX[_sampleIdxX] = sample;

    // Compute (b1*Y(t-T)+...+bn*Y(t-nT))
	if (_sampleIdxY == 0)
		valIdx = FILTER_SIZE_Y - 1;
	else
		valIdx = _sampleIdxY-1;

    for(coefIdx=1; coefIdx<FILTER_SIZE_Y; coefIdx++)
    {
    	sum += _param.coeffDen[coefIdx]*_valuesY[valIdx];
    	if (valIdx==0)
    		valIdx = FILTER_SIZE_Y;
    	valIdx--;
    }

    // Opposite value
    sum = -sum;
    // Add (a0*X(t)+a1*X(t-T)+...+an*X(t-nT))
	valIdx = _sampleIdxX;
    for(coefIdx=0; coefIdx<FILTER_SIZE_X; coefIdx++)
    {
    	sum += _param.coeffNum[coefIdx]*_valuesX[valIdx];
    	if (valIdx==0)
    		valIdx = FILTER_SIZE_X;
    	valIdx--;
    }

    // Divide by b0 and save
    result = (T)(sum/_param.coeffDen[0]);
    _valuesY[_sampleIdxY] = result;

    // Update to next sample idx
    _sampleIdxX++;
    if (_sampleIdxX==FILTER_SIZE_X)
    	_sampleIdxX = 0;
    _sampleIdxY++;
    if (_sampleIdxY==FILTER_SIZE_Y)
    	_sampleIdxY = 0;

    // Return the value
     return result;
}

// reset - clear the filter
template <class T, class U, uint8_t FILTER_SIZE_X, uint8_t FILTER_SIZE_Y>
void DiscreteFilter<T,U,FILTER_SIZE_X,FILTER_SIZE_Y>::reset(T value){
	uint8_t idx;
	U sumCoeffNum = (U) 0;
	U sumCoeffDen = (U) 0;
	T initYVal = (T) 0;

	// Reset initial condition to the state
	for (idx=0 ; idx<FILTER_SIZE_X ; idx++)
	{
		_valuesX[idx] = value;
		sumCoeffNum += (U) _param.coeffNum[idx];
	}

	for (idx=0 ; idx<FILTER_SIZE_Y ; idx++)
	{
		sumCoeffDen += (U) _param.coeffDen[idx];
	}

	initYVal = (T) ((sumCoeffNum * (U)value) / sumCoeffDen) ;

	for (idx=0 ; idx<FILTER_SIZE_Y ; idx++)
	{
		_valuesY[idx] = (T) initYVal;
	}
	// Reset sampling idx to zero
	_sampleIdxX = 0;
	_sampleIdxY = 0;
}

} /* namespace autom */

