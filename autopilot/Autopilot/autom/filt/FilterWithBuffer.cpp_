/*
 * FilterWithBuffer.cpp
 *
 *  Created on: 11 janv. 2013
 *      Author: Aberzen
 */

#include <math/MathUtils.hpp>

// Constructor
template <class T, uint8_t FILTER_SIZE>
FilterWithBuffer<T,FILTER_SIZE>::FilterWithBuffer()
: Filter<T>(),
  sample_index(0)
{
    // clear sample buffer
    reset(0);
}

// Destructor
template <class T, uint8_t FILTER_SIZE>
FilterWithBuffer<T,FILTER_SIZE>::~FilterWithBuffer()
{

}

// reset - clear all samples from the buffer
template <class T, uint8_t FILTER_SIZE>
void FilterWithBuffer<T,FILTER_SIZE>::reset(T value)
{
    // call base class reset
    Filter<T>::reset(value);

    // clear samples buffer
    for( int8_t i=0; i<FILTER_SIZE; i++ ) {
        samples[i] = value;
    }

    // reset index back to beginning of the array
    sample_index = 0;
}

// apply - take in a new raw sample, and return the filtered results
template <class T, uint8_t FILTER_SIZE>
T FilterWithBuffer<T,FILTER_SIZE>::apply(T sample)
{
	T result = samples[sample_index];
	samples[sample_index] = sample;
	
	sample_index ++;
	
	if (sample_index>=FILTER_SIZE)
		sample_index = 0;
	
    // base class doesn't know what filtering to do so we just return the raw sample
    return result;
}


