/*
 * HalMpu6000.hpp
 *
 *  Created on: 20 mars 2013
 *      Author: Aberzen
 */

#ifndef HALMPU6000_HPP_
#define HALMPU6000_HPP_

#include <FreeRTOS.h>
#include <semphr.h>
#include <MemoryMgt.hpp>
#include <Vector3.hpp>
#include <Quaternion.hpp>

namespace hw {

class HalMpu6000 {
public:
	typedef enum {
		E_GYR_CNF_250DPS = 0x00,
		E_GYR_CNF_500DPS = 0x08,
		E_GYR_CNF_1000DPS = 0x10,
		E_GYR_CNF_2000DPS = 0x18
	} T_GYR_CNF;

	typedef enum {
		E_ACC_CNF_2G = 0,
		E_ACC_CNF_4G = 1,
		E_ACC_CNF_8G = 2,
		E_ACC_CNF_16G = 3
	} T_ACC_CNF;

	typedef enum {
		E_UPT_FREQ_1000HZ = 0x00,
		E_UPT_FREQ_500HZ = 0x01,
		E_UPT_FREQ_250HZ = 0x03,
		E_UPT_FREQ_200HZ = 0x04,
		E_UPT_FREQ_100HZ = 0x09,
		E_UPT_FREQ_50HZ = 0x13
	} T_UPT_FREQ;

public:
	HalMpu6000(T_GYR_CNF gyrCnf, T_ACC_CNF accCnf, T_UPT_FREQ freq);
	virtual ~HalMpu6000() ;

	/** @brief Update measurement (return true if new measurement is received, else false) */
	bool update( void );

	/** @brief Waiting for new data to be received */
	bool waitNewData( portTickType tick );

	/** @brief MPU hardware initialization */
	void init();

	/** @brief Convert and set gyro offsets */
	void set_gyro_offsets_scaled(float offX, float offY, float offZ);
	/** @brief Convert offsets into HW offset and set them  */
	void set_accel_offsets_scaled(float offX, float offY, float offZ);
	/** @brief Digital Motion Processing: initialization */
	void dmp_init();
	/** @brief Digital Motion Processing: reset */
	void dmp_reset();
	/** @brief Digital Motion Processing: set fusion gain */
	void dmp_set_sensor_fusion_accel_gain(uint8_t gain);

	/** @brief Get product ID */
	inline uint8_t getProductId();

	/** @brief Get measured angular rate in unit frame [rad/s] */
	inline void getAngRateMeas(math::Vector3f& angRateMeas_U);

	/** @brief Get measured linear acceleration (minus gravity) in unit frame [m/s^2]*/
	inline void getLinAccMeas(math::Vector3f& linAccMeas_U);

	/** @brief Get measured temperature [°C] */
	inline void getTempMeas(float& tempMeas);

protected:
	/** @brief Read IMU register */
	uint8_t register_read( uint8_t reg );
	/** @brief Write IMU register */
	void register_write(uint8_t reg, uint8_t val);
	/** @brief Set gyro offsets */
	void set_gyro_offsets(int16_t offsetX, int16_t offsetY, int16_t offsetZ);
	/** @brief Set accelerometer offsets */
	void set_accel_offsets(int16_t offsetX, int16_t offsetY, int16_t offsetZ);
	/** @brief Digital Motion Processing: write register */
	void dmp_register_write(uint8_t bank, uint8_t address, uint8_t num_bytes, uint8_t data[]);
	/** @brief Digital Motion Processing: check if data received in FIFO */
	bool FIFO_ready();
	/** @brief Digital Motion Processing: reset FIFO content */
	void FIFO_reset();
	/** @brief Digital Motion Processing: read FIFO packet */
	void FIFO_getPacket();
	/** @brief Digital Motion Processing: apply default gyro calibration FS=2000dps and default orientation */
	void dmp_set_gyro_calibration();
	/** @brief Digital Motion Processing: apply default accel calibration scale=8g and default orientation */
	void dmp_set_accel_calibration();
	/** @brief Digital Motion Processing: set endianess of acceleration */
	void dmp_apply_endian_accel();
	/** @brief Digital Motion Processing: configure 6 sensors' outputs */
	void dmp_set_mpu_sensors();
	/** @brief Digital Motion Processing: turn on bias from no motion */
	void dmp_set_bias_from_no_motion();
	/** @brief Digital Motion Processing: turn off internal bias correction */
	void dmp_set_bias_none();
	/** @brief Digital Motion Processing: activate interrupt on FIFO reception */
	void dmp_set_fifo_interrupt();
	/** @brief Digital Motion Processing: send quaternion to FIFO */
	void dmp_send_quaternion();
	/** @brief Digital Motion Processing: send gyro data to FIFO */
	void dmp_send_gyro();
	/** @brief Digital Motion Processing: send accel data to FIFO */
	void dmp_send_accel();
	/** @brief Digital Motion Processing: set FIFO update frequency */
	void dmp_set_fifo_rate(uint8_t rate);
	/** @brief Digital Motion Processing: load DMP memory bank */
	void dmp_load_mem();

protected:
	/** @brief Digital Motion Processing: load DMP memory bank */
	static void interruptHandler();

	/** @brief Read 16 bits words on SPI bus */
	static int16_t spi_transfer_16(void);

protected:
	/** @brief Update frequency */
	T_UPT_FREQ _freq;

	/** @brief Product ID */
	volatile bool _isNewData;

	/** @brief Product ID */
	uint8_t _productId;

	/** @brief Is MPU initialized */
    bool _isInitialised;

	/** @brief Is DMP initialized */
    bool _isDmpInitialised;

    /** @brief Gyro configuration */
    T_GYR_CNF _gyrCnf;

    /** @brief Acco configuration */
    T_ACC_CNF _accCnf;

    /** @brief Configured gyro LSB */
    float _gyrLsb;

	/** @brief Configured accel LSB */
    float _accLsb;

	/** @brief Latest measured angular rate in unit frame [rad/s] */
    math::Vector3f _angRateMeas_U;

	/** @brief Latest measured linear acceleration in unit frame (only contact accelerations) [m/s^2] */
    math::Vector3f _linAccMeas_U;

	/** @brief Measured attitude from Body to Earth, as a quaternion */
    math::Quaternion _attitudeMeas_BE;

	/** @brief Latest measured temperature [°C] */
    float _tempMeas;

    /** @brief */
    uint8_t _fifoCountH;

    /** @brief */
    uint8_t _fifoCountL;

    /** @brief Semaphore to react to data reception */
    xSemaphoreHandle _synch;


protected:
    static volatile HalMpu6000* _imu;
    /** @brief Digital Motion Processor program memory content */
	static const uint8_t _dmpMem[8][16][16] PROGMEM;
};

/** @brief Get product ID */
uint8_t HalMpu6000::getProductId() {
	return _productId;
}

/** @brief Get measured angular rate in unit frame [rad/s] */
void HalMpu6000::getAngRateMeas(math::Vector3f& angRateMeas_U) {
	angRateMeas_U(_angRateMeas_U);
}

/** @brief Get measured linear acceleration in unit frame (minus gravity) [m/s^2]*/
void HalMpu6000::getLinAccMeas(math::Vector3f& linAccMeas_U) {
	linAccMeas_U(_linAccMeas_U);
}

/** @brief Get measured temperature [°C] */
void HalMpu6000::getTempMeas(float& tempMeas) {
	tempMeas = _tempMeas;
}


} /* namespace hw */
#endif /* HALMPU6000_HPP_ */
